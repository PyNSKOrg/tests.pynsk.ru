-
  info:
    name: "Синтаксис Python3 #2"
    author: Alexander Sapronov (PyNSK)
    description: |
      Тест позволит проверить проверить знание конструкций языка
      Тест содержит вопросы на элементы синтаксиса, которые можно встретить при написании hello world

      # TODO
      написать описание
    published: True
    created_on: "2016-02-01T00:00:00+06:00"
    changed_on: "2016-02-01T00:00:00+06:00"
  questions:
    -
      question:
        text: Как проверить что переменная ABC целое или вещественное число?
      answers:
        -
          text: isinstance(ABC, (int, float))
          is_true: True
        -
          text: is_int(ABC) and is_float(ABC)
        -
          text: is_type(ABC, (int, float))
        -
          text: type_of(ABC) == int and type_of(ABC) == float
    -
      question:
        text: Как читать конструкцию not A or B and C (каков приоритет операций)?
      answers:
        -
          text: (not A) or (B and C)
          is_true: True
        -
          text: (not A) or B) and C
        -
          text: (not (A and B)) and C
        -
          text: A or B or C
    -
      question:
        text: Как "бросить" исключение KeyError с текстом "my exception"?
      answers:
        -
          text: raise KeyError("my exception")
          is_true: True
        -
          text: KeyError("my exception")
        -
          text: catch KeyError with "my exception"
        -
          text: raise KeyError with "my exception"
    -
      question:
        text: Как удалить элемент 'val1' из словаря my_dict?
      answers:
        -
          text: del my_dict['val1']
          is_true: True
        -
          text: delete my_dict['val1']
        -
          text: my_dict['val1'].del()
        -
          text: my_dict['val1'].delete()
    -
      question:
        text: Чему равна переменная __name__?
      answers:
        -
          text: Имени файла без каталога и расширения (если модуль был импортирован) или __main__ (если модуль запускается как программа)
          is_true: True
        -
          text: Имени создателя языка
        -
          text: Имени вашего пользователя в системе
        -
          text: Равен переменной __main__
    -
      question:
        text: От чего наследуются все объекты в Python?
      answers:
        -
          text: object
          is_true: True
        -
          text: BaseObject
        -
          text: base_object
        -
          text: base
    -
      question:
        text: Как разрешаются конфликты методов при множественном наследовании?
      answers:
        -
          text: алгоритм MRO (Method Resolution Order)
          is_true: True
        -
          text: алгоритм LRU (Linear Resolution Undefine)
        -
          text: алгоритм LFO (Linear Resolution Order)
        -
          text: алгоритм MFO (Method Formation Order)
    -
      question:
        text: |
          Есть переменная ABC с целочисленным значением.
          Какой из предложенных вариантов преобразует переменную в строку с длинной 10 символов, дополнив ABC сначала нулями в случае необходимости

          Пример:
          ABC = 5
          > '0000000005'
      answers:
        -
          text: format(ABC, '010d')
          is_true: True
        -
          text: "'0000000{}'.format(ABC)"
        -
          text: print(ABC)
        -
          text: format('010d', ABC)
    -
      question:
        text: "Какой встроенный метод позволит реализовать логику: на каждом шаге цикла for по списку ABC вывести значение элемента и порядковый номер шага итерации."
      answers:
        -
          text: enumerate
          is_true: True
        -
          text: никакой, надо делать вспомогательную переменную
        -
          text: index
        -
          text: number
    -
      question:
        text: |
          Как можно переписать этот код?

          a = [x for x in range(100) if x % 2 == 0]

      answers:
        -
          text: |
            a = []
            for x in range(100):
              if x % 2 == 0:
                a.append(x)

          is_true: True
        -
          text: |

            for x in range(100):
              if x % 2 == 0:
                a.append(x)
        -
          text: |

            [x for x in range(100):
              if x % 2 == 0:
                a.append(x)]
        -
          text: |

            a = []
            for x in range(100):
              if x % 2:
                a.append(x)
    -
      question:
        text: Какая встроенная функция может помочь для задачи - Применить функцию super_func к каждому элементу списка ABC?
      answers:
        -
          text: map
          is_true: True
        -
          text: reduce
        -
          text: make
        -
          text: iterate
    -
      question:
        text: "Какая конструкция языка Python позволяет изменить поведение функции, не изменяя её код?"
      answers:
        -
          text: декоратор
          is_true: True
        -
          text: рефактор
        -
          text: реплесер
        -
          text: трансдьюсер
    -
      question:
        text: Как получить список всех доступных методов объекта ABC?
      answers:
        -
          text: dir(ABC)
          is_true: True
        -
          text: methods(ABC)
        -
          text: help(ABC)
        -
          text: man(ABC)
    -
      question:
        text: |
          Есть класс:

          class MyClass(object):
            def method(self, a, b, c):
              pass

          Что хранит переменная self?
      answers:
        -
          text: Переменная указывает на объект экземпляра класса
          is_true: True
        -
          text: None
        -
          text: Переменная указывает на класс
        -
          text: Список ссылок на экземпляры класса
    -
      question:
        text: Укажите отличительную черту объектов-итераторов с точки зрения хранения элементов
      answers:
        -
          text: Элемент итератора вычисляется в момент обращения
          is_true: True
        -
          text: Все элементы итератора вычисляются заранее, но не при создании
        -
          text: Текущий элемент итератора вычисляются вместе со следующим в момент обращения
        -
          text: Все элементы итератора хранятся в памяти, а вычисляются при создании объекта
    -
      question:
        text: Какой смысл несет оператор yield?
      answers:
        -
          text: Служит для возврата значений из функции, превращает функцию в генератор.
          is_true: True
        -
          text: sys.exit()
        -
          text: Служит для возврата значений из функции в точности как return. Return и yield синонимы.
        -
          text: Такой конструкции в Python 3 нет
    -
      question:
        text: |

          Укажите равносильный код:

          def generator_range(first, last):
            yield from range(first, last)

      answers:
        -
          text: |

            def generator_range(first, last):
              for i in xrange(first, last):
                  yield i

          is_true: True
        -
          text: |

            def generator_range(first, last):
              yield i
              for i in xrange(first, last):
                yield i
        -
          text: |

            def generator_range(first, last):
              for i in xrange(first, last):
                yield return i
        -
          text: |

            def generator_range(first, last):
              for i in xrange(first, last):
                return i
    -
      question:
        text: Что происходит при выходе из функции-генератора _НЕ_ по оператору yield?
      answers:
        -
          text: Генерируется исключение StopIteration
          is_true: True
        -
          text: Возвращается None
        -
          text: Ничего
        -
          text: Генерируется исключение GeneratorIteration
    -
      question:
        text: |
          Какой "магический" метод (с названием __ИМЯ__) используется встроенной функцией help, чтобы вывести подробное описание объекта?

          Например
            > help(5)

            Help on int object:

            class int(object)
             |  int(x=0) -> int or long
             |  int(x, base=10) -> int or long
             ...

      answers:
        -
          text: __doc__
          is_true: True
        -
          text: __help__
        -
          text: __man__
        -
          text: __info__
    -
      question:
        text: |
          Какой код соответствует логике - "Если хотя бы один элемент итератора ABC равен None - вызвать функцию exit"
      answers:
        -
          text: |

            if any(iter([x is None for x in ABC])):
              exit()

          is_true: True
        -
          text: |

            for x in ABC:
              if ABC is None:
                exit()
        -
          text: |

            for cur_element, next_element in ABC.items():
              if cur_element is None:
                exit()
        -
          text: |

            if any(iter([x is None for x in ABC])):
              exit()